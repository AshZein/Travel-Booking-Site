generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int             @id @default(autoincrement())
  password      String
  firstName     String
  lastName      String
  email         String          @unique
  picture       String          @default("default.jpg")
  phoneNumber   String
  flightBooking FlightBooking[]
  hotelBooking  HotelBooking[]
  hotelManagers HotelManager[]
  itineraries   Itinerary[]
  notifications Notifications[]
  invoices      invoice[]
}

model Notifications {
  id      Int      @id @default(autoincrement())
  userId  Int
  message String
  date    DateTime @default(now())
  read    Boolean  @default(false)
  cleared Boolean  @default(false)
  type    String
  user    User     @relation(fields: [userId], references: [userId])
}

model Hotel {
  hotelId      Int             @id @default(autoincrement())
  name         String
  logo         String          @default("default.jpg")
  address      String
  city         String
  country      String
  latitude     Float
  longitude    Float
  starRating   Int
  amenities    Amenity[]
  hotelBooking HotelBooking[]
  images       HotelImage[]
  managers     HotelManager[]
  rooms        HotelRoomType[]

  @@unique([name, address])
}

model HotelManager {
  managerId Int   @id @default(autoincrement())
  userId    Int
  hotelId   Int
  hotel     Hotel @relation(fields: [hotelId], references: [hotelId])
  user      User  @relation(fields: [userId], references: [userId])

  @@unique([userId, hotelId])
}

model HotelImage {
  imageId Int    @id @default(autoincrement())
  image   String
  hotelId Int
  hotel   Hotel  @relation(fields: [hotelId], references: [hotelId])
}

model HotelRoomType {
  roomId          Int            @id @default(autoincrement())
  hotelId         Int
  roomType        String
  price           Float
  numberAvailable Int
  hotelBooking    HotelBooking[]
  hotel           Hotel          @relation(fields: [hotelId], references: [hotelId])
  amenities       RoomAmenity[]
  images          RoomImage[]

  @@unique([hotelId, roomType])
}

model RoomImage {
  imageId Int           @id @default(autoincrement())
  image   String
  roomId  Int
  room    HotelRoomType @relation(fields: [roomId], references: [roomId])
}

model Amenity {
  id      Int    @id @default(autoincrement())
  hotelId Int
  amenity String
  hotel   Hotel  @relation(fields: [hotelId], references: [hotelId])
}

model RoomAmenity {
  id      Int           @id @default(autoincrement())
  roomId  Int
  amenity String
  room    HotelRoomType @relation(fields: [roomId], references: [roomId])
}

model HotelBooking {
  id              Int           @id @default(autoincrement())
  userId          Int
  referenceId     String        @unique
  hotelId         Int
  roomId          Int
  price           Float
  checkIn         DateTime
  checkOut        DateTime
  bookingMade     DateTime
  bookingCanceled Boolean       @default(false)
  canceledDate    DateTime?
  hotelRoomType   HotelRoomType @relation(fields: [roomId], references: [roomId])
  hotel           Hotel         @relation(fields: [hotelId], references: [hotelId])
  user            User          @relation(fields: [userId], references: [userId])
}

model FlightBooking {
  id               Int       @id @default(autoincrement())
  userId           Int
  bookingReference String    @unique
  bookingMade      DateTime
  bookingCanceled  Boolean   @default(false)
  canceledDate     DateTime?
  user             User      @relation(fields: [userId], references: [userId])
}

model Itinerary {
  itineraryId             Int      @id @default(autoincrement())
  userId                  Int
  forwardFlightBookingRef String   @default("")
  returnFlightBookingRef  String   @default("")
  hotelBookingRef         String   @default("")
  itineraryRef            String   @unique
  user                    User     @relation(fields: [userId], references: [userId])
  invoices                invoice?
}

model invoice {
  invoiceId           Int       @id @default(autoincrement())
  userId              Int
  passportNum         String    @default("")
  billingFirstName    String
  billingLastName     String
  billingStreet       String
  billingCity         String
  billingProvince     String
  billingCountry      String    @default("Canada")
  billingPhoneNum     String
  billingEmail        String
  itineraryRef        String    @unique
  hotelCost           Float
  departureFlightCost Float
  returnFlightCost    Float
  itinerary           Itinerary @relation(fields: [itineraryRef], references: [itineraryRef])
  user                User      @relation(fields: [userId], references: [userId])
}

model Airport {
  id      String @id
  code    String @unique
  name    String
  city    String
  country String

  @@unique([city, country, name])
}

model City {
  id      Int    @id @default(autoincrement())
  city    String
  country String

  @@unique([city, country])
}

model LastGeneratedId {
  type  String @id
  value Int
}
